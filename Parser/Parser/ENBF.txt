Grundlæggende: Char, Int, Float, String (implicit [Char])

Alt er expressions og skal returnere noget.
Et subset af funktioner vil have side conditions og kan derfor ikke returnere noget, f.eks. print/echo og IO.
Disse vil kun pille ved noget eksternt, og ikke ændre program state.

[1, 2, 3, 4, 5]
first 1
last 5


Examples:
define myFunction: Int a Int b Int c Int d -> Int
{
  if a+b > 2 { a+b } { c+d }
}

define myListFunction: [Int] ints -> Int
{
  first(ints)
}

define divide: Int a Int b -> Int
{
  a / b
}


# Comment
define split: String str, Char c -> [String]
{
  let Char fChar = (first str), String rest = (rest str) {

  }
}

let Int a = 2, Int b = 3
{

}
Bliver til:
{
    int a = 2;
    int b = 3;
}

switch 1 > 2 ? "asd"
: 1 = 2 ? "derp"
: 1 < 2 ? "yeps"
: else "fuck"


EBNF:

program := [func] // Liste af func's

func := "define" name ": " pars " -> " type block

pars := type name | type name ", " pars
block := "{" expr "}"

expr := if
| varname
| expr op expr
| "(" expr ")"
| switch
| boolLit
| number
| call

op := AND | OR | * | / | + | - | < | > | <= | >= | ==

if := "if" expr block block

switch := "switch" case ":" "else" expr
case := expr "?" expr {cases}
cases := ":" case

call := name "(" passPars ")"
passPars := expr | expr "," passPars


