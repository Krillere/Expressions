# All types
type DateTime {
  Int day,
  Int month,
  Int year,
  Int hours,
  Int minutes,
}

type Appointment {
  DateTime startTime,
  DateTime endTime,
  String description,
}

type Calendar {
  [Calendar] calendars,
  [Appointment] appointments,
}

#
#  Calendar functions
#

# Creates an empty calendar (No nested calendars or appointments)
define emptyCalendar: -> Calendar {
  Calendar([], [])
}

# Adds an appointment to a calendar
define addAppointment: Calendar cal, Appointment app -> Calendar {
  Calendar(cal.calendars, append(cal.appointments, app))
}

# Removes an appointment from a calendar (Removes all instances)
define removeAppointment: Calendar cal, Appointment app -> Calendar {
  let [Appointment] apps = cal.appointments {
  Calendar(cal.calendars, filter(apps, lambda (Appointment testApp -> Bool) { !equalAppointments(app, testApp) }))
  }
}

# Adds a calendar to a calendar
define addCalendar: Calendar cal, Calendar calToAdd -> Calendar {
  Calendar(append(cal.calendars, calToAdd), cal.appointments)
}

# Removes a calendar from a calendar
define removeCalendar: Calendar cal, Calendar toRemove -> Calendar {
  emptyCalendar()
}

# Finds a number of appointments based on a predicate
define findAppointments: Calendar cal, (Appointment -> Bool) pred -> [Appointment] {
  if null(cal.appointments) { [] } # Bail if no appointments are found
  {
    filter(cal.appointments, pred)
  }
}

# Are cal1 and cal2 equal?
# Flatten calendars and check appointments
define equalCalendars: Calendar cal1, Calendar cal2 -> Bool {
  let Calendar flatCal1 = flattenCalendar(cal1), Calendar flatCal2 = flattenCalendar(cal2),
      [Appointment] apps1 = flatCal1.appointments, [Appointment] apps2 = flatCal2.appointments
  {
    if length(apps1) != length(apps2) { false } # If there isn't the same amount, they're not equal
                                      { equalCalendarsHelper(apps1, apps2) } # Test each appointment
  }
}

define equalCalendarsHelper: [Appointment] apps1, [Appointment] apps2 -> Bool {
  if null(apps1) OR null(apps2) { true } {
    let Appointment fApp1 = first(apps1), Appointment fApp2 = first(apps2)
    {
      if !equalAppointments(fApp1, fApp2) { false } # Nope.
                                          { equalCalendarsHelper(tail(apps1), tail(apps2)) } # Try the next one
    }
  }
}

# Flatten a calendar (Flattens all calendars recursively)
define flattenCalendar: Calendar cal -> Calendar {
  let [Calendar] nestedCals = cal.calendars, [Appointment] apps = cal.appointments 
  {
    Calendar([], append(apps, flattenCalendarHelper(nestedCals)))
  }
}
# Appens all 'cals' appointments, and calls itself with the rest of 'cals', along with nested calendars in first(cals)
define flattenCalendarHelper: [Calendar] cals -> [Appointment] {
  if length(cals) == 0 { [] } # Bail if there are no calendars remaining
  {
    let Calendar cal = first(cals), [Appointment] apps = cal.appointments, [Calendar] nestedCals = cal.calendars 
    {
      append(apps, flattenCalendarHelper(tail(cals)), flattenCalendarHelper(nestedCals))
    }
  }
}

#
#  Appointment functions
#

# Does app1 equal app2?
define equalAppointments: Appointment app1, Appointment app2 -> Bool {
  equalDateTimes(app1.startTime, app2.startTime) AND
  equalDateTimes(app1.endTime, app2.endTime) AND
  app1.description == app2.description
}

# Creates an empty appointment (Using epoch-time for start and end)
define emptyAppointment: -> Appointment {
  Appointment(DateTime(0, 0, 1970, 0, 0), DateTime(0, 0, 1970, 0, 0), "")
}

#
#  DateTime functions
#

# Does t1 equal t2?
define equalDateTimes: DateTime t1, DateTime t2 -> Bool {
  t1.day == t2.day AND
  t1.month == t2.month AND
  t1.year == t2.year AND
  t1.hours == t2.hours AND
  t1.minutes == t2.minutes
}



# The entrypoint
define main: -> Int {
  let Appointment app1 = Appointment(DateTime(27, 03, 1994, 13, 37), DateTime(27, 03, 1994, 14, 00), "Dette er en description"),
      Appointment app2 = Appointment(DateTime(20, 04, 2000, 10, 00), DateTime(20, 05, 2000, 8, 00), "En anden begivenhed"),
      Calendar c1 = Calendar([], list(app1)),
      Calendar c2 = Calendar(list(c1), list(app2)),
      Calendar flatCal = flattenCalendar(c2)
  {
    0
  }
}
