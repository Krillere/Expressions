define factorial: Int num -> Int {
  if num <= 1 { 1 } { num * factorial(num-1) }
}

# Map function (Applies 'func' to each object in 'items')
define map: [Generic] items, (Generic -> Generic) func -> [Generic] {
  if null(items) { [] }
                 { append(list(func(first(items))), map(tail(items), func)) }
}
define lmap: [Generic] items1, [Generic] items2, (Generic, Generic -> Generic) func -> [Generic] {
  if (length(items1) != length(items2)) OR null(items1) OR null(items2) { [] }
  { append(list(func(first(items1), first(items2))), lmap(tail(items1), tail(items2), func))  }
}

# Filter function (Tests each object using 'func', if true, add to list)
define filter: [Generic] lst, (Generic -> Bool) func -> [Generic] {
  switch null(lst) { [] } # Stop if empty
         func(first(lst)) { append(list(first(lst)), filter(tail(lst), func)) }
         else { filter(tail(lst), func) }
}

define even: Int a -> Bool {
  (a % 2) == 0
}

define odd: Int a -> Bool {
  !even(a)
}
define addNumbers: Int a, Int b -> Int {
  a + b
}
