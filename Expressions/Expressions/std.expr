# Is the list empty?
define null: [Generic] lst -> Bool {
  length(lst) == 0
}

# First object in list
define first: [Generic] lst -> Generic {
  get(lst, 0)
}

# Last object in list
define last: [Generic] lst -> Generic {
  get(lst, length(lst)-1)
}

# Min function
define min: Int a, Int b -> Int {
  if a < b { a } else { b }
}

# Max function
define max: Int a, Int b -> Int {
  if a > b { a } else { b }
}

# Map function (Applies 'func' to each object in 'items')
define map: [Generic] items, (Generic -> Generic) func -> [Generic] {
  if null(items) { [] }
  else { [func(first(items))] ++ map(tail(items), func) }
}

# Another map function, this one takes two lists and applies a fucntion with two arguments to each element in each list
define map2: [Generic] items1, [Generic] items2, (Generic, Generic -> Generic) func -> [Generic] {
  if (length(items1) != length(items2)) OR null(items1) OR null(items2) { [] }
  else {
    [func(first(items1), first(items2))] ++ map2(tail(items1), tail(items2), func)
  }
}

# Filter function (Tests each object using 'func', if true, add to list)
define filter: [Generic] lst, (Generic -> Bool) func -> [Generic] {
  switch null(lst) { [] } # Stop if empty
         func(first(lst)) { [first(lst)] ++ filter(tail(lst), func) }
         else { filter(tail(lst), func) }
}

# Is the number even?
define even: Int a -> Bool {
  (a % 2) == 0
}

# Is the number not even?
define odd: Int a -> Bool {
  !even(a)
}

# Subsets a list
define subset: [Generic] lst, Int from, Int to -> [Generic] {
    subsetHelper(lst, from, to, 0)
}
define subsetHelper: [Generic] lst, Int from, Int to, Int cur -> [Generic] {
    switch null(lst) { [] } # No more in lst
           cur < from   { subsetHelper(tail(lst), from, to, cur+1) } # We haven't reached from yet
           cur == from  { [first(lst)] ++ subsetHelper(tail(lst), from, to, cur+1) } # Start subsetting
           cur < to AND cur > from  { [first(lst)] ++ subsetHelper(tail(lst), from, to, cur+1) }
           cur == to    { [first(lst)] }
           else { [] }
}

# Gets the first index of a value, or -1
define indexOf: [Generic] lst, Generic item -> Int {
  indexOfHelper(lst, item, 0)
}
define indexOfHelper: [Generic] lst, Generic item, Int curIndex -> Int {
  switch null(lst) { -1 }
         first(lst) == item { curIndex }
         else { indexOfHelper(tail(lst), item, curIndex+1) }
}

# Split list at specific object
define split: [Generic] lst, Generic spl -> [[Generic]] {
  if indexOf(lst, spl) == -1 { [[]] }
  else {  splitHelper(lst, spl) }
}

define splitHelper: [Generic] lst, Generic spl -> [[Generic]] {
  if null(lst) { [[]] } # Stop if lst is empty
  else {
    let Int index = indexOf(lst, spl) # Does lst contain spl and where?
    {
      if index == -1 { list(lst) } # Stop if it does not
      else {
        let [Generic] sub = subset(lst, 0, index-1) {
          [sub] ++ splitHelper(subset(lst, index+1, length(lst)), spl)
        }
      }
    }
  }
}

# Creates a list containing the first and last element of 'lst'
define ends: [Generic] lst -> [Generic] {
  let Generic f = first(lst), Generic l = last(lst) {
    [f] ++ l
  }
}

# Does the list have a specific prefix?
define hasPrefix: [Generic] lst, [Generic] items -> Bool {
  if null(items) OR (length(items) > length(lst)) { false }
  else {
    prefixHelper(lst, items)
  }
}
define prefixHelper: [Generic] lst, [Generic] items -> Bool {
  if null(items) { true }
  else {
    let Generic fLst = first(lst), Generic fItems = first(items) {
      if fLst != fItems { false }
      else { prefixHelper(tail(lst), tail(items)) }
    }
  }
}

# Does the list have a specific postfix? (Uses prefix but reverses first)
define hasPostfix: [Generic] lst, [Generic] items -> Bool {
  hasPrefix(reverse(lst), reverse(items))
}

# Recursive factorial. Probably not very efficient..
define factorial: Int num -> Int {
  if num <= 1 { 1 } else { num * factorial(num-1) }
}

# Reverses a list
define reverse: [Generic] lst -> [Generic] {
  if null(lst) { [] }
  else { reverse(tail(lst)) ++ [first(lst)] }
}
