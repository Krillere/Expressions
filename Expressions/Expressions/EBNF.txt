program := func | func program | objType | objType program

func := "define " name ": " pars " -> " type block

objType := "type " name "{" typeDecls "}"
typeDecls := typeDecl | typeDecl ", " typeDecls
typeDecl  := type name

pars := type name | type name ", " pars
block := "{" exprs "}"
exprs = expr | expr exprs

// if 1 == 2 { 1 } { 2 }
if := "if" expr block block

switch := "switch" cases "else" expr
cases  := case | case cases
case   := expr block

// myFunc(1, 2, 1+2)
call     := name "(" passPars ")"
passPars := expr | expr "," passPars

letExpr  := "let" varDecls block
varDecls := varDecl | varDecl ", " varDecls
varDecl  := type name "=" expr"

// For example: (Int, Int -> Int) takes two integers as parameter and returns integer
funcType := "(" inpTypes "->" type ")"
inpTypes := type | type ", " inpTypes

// For example: lambda (Int a, Int b -> Int) { a + b }
lambda   := "lambda" "(" pars "->" type ")" block

expr := if
| name
| string
| expr op expr
| "(" expr ")"
| switch
| "!" expr
| "-" expr
| boolLit
| number
| call
| letExpr
| lambda
| arrayLit


number   := (0-9)+ | (0-9)+.(0-9)+ | -number
boolLit  := "true" | "false"
string   := """ (.*) """
name     := (a-Z)(a-Z0-9'_)*

arrayLit      := "[" arrayLitConts "]"
arrayLitConts := expr | expr ", " arrayLitConts

type := "String" | "Int" | "Char" | "Float" | "Bool" | "[" type "]" | funcType

op := AND | OR | * | / | + | - | < | > | <= | >= | == | != | .
