Basic types: Char, Int, Float, Bool, String (String is implicitly [Char])

Everything is an expression and each block must return something.
Some functions contains side conditions, and will therefore not return anything, and can be used inside blocks without breaking anything (For example 'print' function)
No global variables or anything like that. The program can only contain types and functions.
Program must contain the entry-point function; main. Defined as such: define main: -> Int { }

Examples in folder 'Code examples (Tests)'


EBNF:

program := func | func program | type | type program

func := "define" name ": " pars " -> " type block

type := "type" name "{" typeDecls "}"
typeDecls := typeDecl | typeDecl ", " typeDecls
typeDecl  := type name

pars := type name | type name ", " pars
block := "{" expr "}"

expr := if
| name
| string
| expr op expr
| "(" expr ")"
| switch
| "!" expr
| "-" expr
| boolLit
| number
| call
| letExpr
| name
| lambda


number  := (0-9)+ | (0-9)+.(0-9)+ | -number
boolLit := "true" | "false"
string  := """ (.*) """
name    := (a-Z)(a-Z0-9'_-)*

op := AND | OR | * | / | + | - | < | > | <= | >= | == | != | .

if := "if" expr block block

switch := "switch" cases "else" expr
cases  := case | case cases
case   := expr block

call     := name "(" passPars ")"
passPars := expr | expr "," passPars

letExpr  := "let" varDecls block
varDecls := varDecl | varDecl ", " varDecls
varDecl  := type name "=" expr"
type     := "String" | "Int" | "Char" | "Float" | "Bool" | "[" type "]" | funcType

funcType := "(" inpTypes "->" type ")" // For example: (Int, Int -> Int) takes two integers as parameter and returns integer
inpTypes := type | type ", " inpTypes

lambda   := "lambda" "(" pars "->" type ")" block // For example: lambda (Int a, Int b -> Int) { a + b }
