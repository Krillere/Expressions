# Testing functions as first-class-citizens

type TestType {
  Int integer,
  (Int, Int -> Int) func
}

define main: -> Int {
  print("ftest med add: ")
  printLn(ftest(add))

  print("ftest med subtract: ")
  printLn(ftest(subtract))

  let (Int, Int -> Int) test = retFunc(1), (Int, Int -> Int) test2 = retFunc(0) {
    print("test: ")
    printLn(test(1, 1))

    print("test2: ")
    printLn(test2(1, 1))
  }

  0 # Can be called with 'add' or 'subtract'
}

define test2: -> Int {
  let TestType derp = TestType(1, add) {
    derp.func(1, 1)
  }
}

define ftest: (Int, Int -> Int) func -> Int {
  func(10, 10)
}

# Methods that adhere to (Int, Int -> Int)
define add: Int a, Int b -> Int {
  a + b
}

define subtract: Int a, Int b -> Int {
  a - b
}

define testing: Int a -> Int {
  let (Int, Int -> Int) addFunc = add {
    a + addFunc(1, 1) # 3
  }
}
define retFunc: Int a -> (Int, Int -> Int) {
  if a == 1 { add }
            { subtract }
}
