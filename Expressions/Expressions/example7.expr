define main: -> Int {
  print("AddAll: ")
  printLn(addAll([1, 1, 1, 2]))

  print("Null: ")
  printLn(nullTest([])) # True

  print("Largest: ")
  printLn(largest([1, 99, 20, 101, 3]))

  print("llength: ")
  printLn(llength([1, 2, 3, 4, 5, 6]))
  0
}

define addAll: [Int] ints -> Int {
  if length(ints) == 1 { first(ints) }
                       { first(ints) + addAll(tail(ints)) }
}

define largest: [Int] ints -> Int {
  if null(ints) { 0 }
                { largestHelper(ints, first(ints)) }
}
define largestHelper: [Int] ints, Int cur -> Int {
  switch length(ints) == 0 { cur }
         first(ints) > cur { largestHelper(tail(ints), first(ints)) }
         else { largestHelper(tail(ints), cur) }
}

define nullTest: [Int] ints -> Bool {
  null(ints)
}
define gen: [Generic] lst -> Generic {
  first(lst)
}

define llength: [Generic] lst -> Int {
  if null(lst) { 0 } { 1 + length(tail(lst)) }
}

