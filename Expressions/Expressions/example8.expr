define main: -> Int {
  print("AddAll: ")
  printLn(addAll([1, 1, 1, 2]))

  print("Null: ")
  printLn(nullTest([])) # True

  print("Null igen: ")
  printLn(null([1,2]))

  print("Null igen, igen: ")
  printLn(null(['a', 'b']))

  print("Largest: ")
  printLn(largest([1, 99, 20, 101, 3]))

  print("llength: ")
  printLn(llength([1, 2, 3, 4, 5, 6]))

  print("Ends: ")
  printLn(ends([1, 2, 3, 4, 5]))

  printLn(genericTesting(1))
  printLn(genericTesting(1.0))
  printLn(genericTesting("asd"))
  printLn(genericTesting(true))
  printLn(genericTesting('a'))

  print("MultGen: ")
  printLn(anotherMult(1, 2))

  print("MultGenArray: ")
  printLn(multGenerics([1], []))
  
  0
}

define addAll: [Int] ints -> Int {
  if length(ints) == 1 { first(ints) }
                       { first(ints) + addAll(tail(ints)) }
}

define largest: [Int] ints -> Int {
  if null(ints) { 0 }
                { largestHelper(ints, first(ints)) }
}
define largestHelper: [Int] ints, Int cur -> Int {
  switch length(ints) == 0 { cur }
         first(ints) > cur { largestHelper(tail(ints), first(ints)) }
         else { largestHelper(tail(ints), cur) }
}

define nullTest: [Int] ints -> Bool {
  null(ints)
}
define gen: [Generic] lst -> Generic {
  first(lst)
}

define llength: [Generic] lst -> Int {
  if null(lst) { 0 } { 1 + length(tail(lst)) }
}

define checkType: Generic obj -> Int {
  switch isInt(obj) { print("Obj er int") 0 }
         isFloat(obj) { print("Obj er float") 0 }
         isChar(obj) { print("Obj er char") 0 }
         isString(obj) { print("Obj er string") 0 }
         else { 0 }
}

define genericTesting: Generic gen -> String {
switch isInt(gen)    { "Integer" }
       isFloat(gen)  { "Float" }
       isString(gen) { "String" }
       isChar(gen)   { "Char" }
       isBool(gen)   { "Bool" }
       else { "Unknown" }
}

define multGenerics: [Generic_A] gena, [Generic_B] genb -> Int {
  0
}

define anotherMult: Generic_A gena, Generic_B genb -> Int {
  1+1
}
