Grundlæggende: Char, Int, Float, String (implicit [Char])

Alt er expressions og skal returnere noget.
Et subset af funktioner vil have side conditions og kan derfor ikke returnere noget, f.eks. print/echo og IO.
Disse vil kun pille ved noget eksternt, og ikke ændre program state.

Examples in folder 'Code examples (Tests)'

EBNF:

program := func | func program | type | type program

func := "define" name ": " pars " -> " type block

type := "type" name "{" typeDecls "}"
typeDecls := typeDecl | typeDecl ", " typeDecls
typeDecl  := type name

pars := type name | type name ", " pars
block := "{" expr "}"

expr := if
| name
| string
| expr op expr
| "(" expr ")"
| switch
| boolLit
| number
| call
| let
| name . name
| name . call


number  := (0-9)+ | (0-9)+.(0-9)+ | -number
boolLit := "true" | "false"
string  := """ (.*) """
name    := (a-Z) (a-Z0-9'_-)*

op := AND | OR | * | / | + | - | < | > | <= | >= | == | !=

if := "if" expr block block

switch := "switch" cases "else" expr
cases  := case | case cases
case   := expr block

call     := name "(" passPars ")"
passPars := expr | expr "," passPars

let      := "let" vardecls block
vardecls := type name "=" expr" | type name "=" expr ", " vardecls
type     := "String" | "Int" | "Char" | "Float" | "Bool" | "[" type "]" | funcType

funcType := "(" "(" inpTypes ")" "->" type ")" // For example: ((Int, Int) -> Int) takes two integers as parameter and returns integer
inpTypes := type | type ", " inpTypes
