# Testing types

type TestType {
  Int iint,
  String sstring,
  Char cchar,
}

type AnotherType {
  Int int1,
  Int int2
}

type NestedType {
  AnotherType test,
  Int a
}

type Tree {
  Int value,
  Tree parent,
  Tree left,
  Tree right
}


define main: -> Int {
  let TestType test = TestType(0, "asd", 'a'),
      Tree root = Tree(0, null, Tree(1, root, null, null), Tree(2, root, null, null))
  {
    printLn(root.right.value)
    test.iint # 0
  }
}

define test: -> AnotherType {
  let String derp = "asdf" {
    AnotherType(1, 1)
  }
}


define aTest: Int a, Int b, Int c, Char ch, String str -> Int {
  a + b + c
}
